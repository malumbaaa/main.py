docker-build:
# Use the official docker image.
image: docker:latest
stage: build
services:
- docker:dind
before_script:
- docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
# Default branch leaves tag empty (= latest tag)
# All other branches are tagged with the escaped branch name (commit ref slug)
script:
-
if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
tag=""
echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
else
tag=":$CI_COMMIT_REF_SLUG"
echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
fi
- docker build —pull -t "$CI_REGISTRY_IMAGE${tag}" .
- docker push "$CI_REGISTRY_IMAGE${tag}"
# Run this job in a branch where a Dockerfile exists
rules:
- if: $CI_COMMIT_BRANCH
exists:
- Dockerfile
stages:
- build
- testing
- staging
- preprod
- approve
- production

## build stage
build:
stage: build
tags: [deploy]
script:
- echo "Build"

## testing stage
test unit:
stage: testing
tags: [deploy]
script:
- echo "test unit"

test integration:
stage: testing
tags: [deploy]
script:
- echo "test integration"

test selenium:
stage: testing
tags: [deploy]
script:
- echo "test selenium"

## staging stage
.staging-deploy: &staging-deploy
tags: [deploy]
stage: staging
when: manual
script:
- echo $CI_BUILD_NAME


deploy to dev-1:
«: *staging-deploy

deploy to dev-2:
«: *staging-deploy

deploy to devops-1:
«: *staging-deploy

deploy to devops-2:
«: *staging-deploy

deploy to qa-1:
«: *staging-deploy

deploy to qa-2:
«: *staging-deploy


## preprod stage
deploy to preprod:
stage: preprod
tags: [deploy]
when: manual
script:
- echo "deploy to preprod"

## approve stage
approve:
stage: approve
tags: [deploy]
when: manual
script:
- echo "APPROVED"

NOT approve:
stage: approve
tags: [deploy]
when: manual
script:
- echo "NOT APPROVED"

## production stage
deploy to production:
stage: production
tags: [deploy]
when: manual
script:
- echo "deploy to production!"